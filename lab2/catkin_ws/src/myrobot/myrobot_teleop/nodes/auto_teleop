#!/usr/bin/env python

import rospy
import random
import math
from geometry_msgs.msg import Twist
from sensor_msgs.msg import LaserScan
from nav_msgs.msg import Odometry
from tf.transformations import euler_from_quaternion
from visualization_msgs.msg import Marker
import time

def polar_to_cartesian(r, theta):
    x = r * math.cos(theta)
    y = r * math.sin(theta)
    return x, y

def cartesian_to_polar(x, y, degrees=False):
    r = math.sqrt(x**2 + y**2)
    theta = math.atan2(y, x)

    if degrees:
        theta = math.degrees(theta)

    return r, theta


class Gap:
    def __init__(self, angle, distance):
        self.angle = angle
        self.distance = min(distance, 13)

class VisualizationManager:
    def __init__(self):
        self.marker_pub = rospy.Publisher('debug_marker', Marker, queue_size=10)

    def publish_marker_relative_to_robot(self, x, y, ns = "debug_markers", id = 0, color = (1, 0, 0), scale = 0.1):   
        marker = Marker()
        marker.header.frame_id = "base_link"
        marker.header.stamp = rospy.Time.now()        
        marker.ns = ns
        marker.id = id
        marker.type = Marker.SPHERE
        marker.action = Marker.ADD        
        marker.scale.x = scale
        marker.scale.y = scale
        marker.scale.z = scale        
        marker.color.r = color[0]
        marker.color.g = color[1]
        marker.color.b = color[2]
        marker.color.a = 1.0        
        
        marker.pose.position.x = x
        marker.pose.position.y = y
        marker.pose.position.z = 0.5  # Slightly above ground
        
        marker.pose.orientation.x = 0.0
        marker.pose.orientation.y = 0.0
        marker.pose.orientation.z = 0.0
        marker.pose.orientation.w = 1.0
        
        marker.lifetime = rospy.Duration(2.0)
        self.marker_pub.publish(marker)
        


class AutoTeleop:
    def __init__(self):
        rospy.init_node('auto_teleop')
        self.visualization_manager = VisualizationManager()
        self.pub = rospy.Publisher('/controller/cmd_vel', Twist, queue_size=10)
        self.lidar_ranges = []
        self.angle_min = 0
        self.angle_increment = 0
        
        # Subscribe to LIDAR
        rospy.Subscriber('/myrobot/rplidar/scan', LaserScan, self.lidar_callback)
        rospy.Subscriber('/controller/odom', Odometry, self.odom_callback)

        # Control parameters
        self.min_gap_width = 2  # Minimum width in meters for a traversable gap
        self.min_gap_depth = 0.5  # Minimum depth in meters for a traversable gap
        self.max_gap_depth = 12  # Maximum distance to consider for gaps
        self.angular_speed = 0.4
        self.linear_speed = 0.5
        self.old_gap = None
        self.target_distance = 1.0  # Target distance to maintain from obstacles
        
        self.rate = rospy.Rate(10)
        self.current_position = {'x': 0, 'y': 0, 'theta': 0} 
        rospy.loginfo("Gap-finding navigation started")

        # Add marker publisher
        self.marker_pub = rospy.Publisher('debug_marker', Marker, queue_size=10)
        self.start_time = time.time()
        self.gaps = []

    def lidar_callback(self, msg):
        self.lidar_ranges = [min(x if not math.isinf(x) else self.max_gap_depth, self.max_gap_depth) for x in msg.ranges]
        self.angle_min = msg.angle_min
        self.angle_increment = msg.angle_increment
        rospy.logdebug("LIDAR data received: %d points", len(self.lidar_ranges))

    def odom_callback(self, msg):
        # Get position
        self.current_position['x'] = msg.pose.pose.position.x
        self.current_position['y'] = msg.pose.pose.position.y
        
        # Get orientation
        orientation_q = msg.pose.pose.orientation
        orientation_list = [orientation_q.x, orientation_q.y, orientation_q.z, orientation_q.w]
        (roll, pitch, yaw) = euler_from_quaternion(orientation_list)
        self.current_position['theta'] = yaw
        rospy.logdebug("Position: (%.2f, %.2f) Orientation: %.2f degrees", 
                      self.current_position['x'], 
                      self.current_position['y'], 
                      math.degrees(self.current_position['theta'])) 

    def change_angle(self, target_angle):
        """
        Rotate the robot to the target angle using current orientation feedback
        target_angle: desired angle in radians
        """
        twist = Twist()
        error_threshold = math.radians(0.5)  # 0.5 degree threshold
        
        while not rospy.is_shutdown():
            # Calculate the shortest angle difference
            current_angle = self.current_position['theta']

            rospy.loginfo("rotating... current angle = %.1f", math.degrees(current_angle))

            angle_diff = target_angle - current_angle
            
            # Check if we're close enough to target
            if abs(angle_diff) < error_threshold:
                break
            
            # Set angular velocity proportional to the difference
            twist.angular.z = max(min(angle_diff, self.angular_speed), -self.angular_speed)
            
            if (self.gaps is not None):
                for gap in self.gaps:
                    self.publish_gap_marker(gap, len(self.gaps) - 1)
            
            self.pub.publish(twist)
            self.rate.sleep()
        
        # Stop rotation
        twist.angular.z = 0
        self.pub.publish(twist)
        rospy.loginfo("Robot rotated to angle %.1f degrees", math.degrees(target_angle))

    def find_gaps(self):
        """
        Find gaps in LIDAR data and visualize them with markers
        Returns list of Gap objects
        """
        if not self.lidar_ranges:
            return []

        gaps = []
        gap_start = None
        num_samples = len(self.lidar_ranges)

        # Clear all previous gap markers
        delete_marker = Marker()
        delete_marker.header.frame_id = "base_link"
        delete_marker.header.stamp = rospy.Time.now()
        delete_marker.ns = "gap_markers"  # Same namespace as gap markers
        delete_marker.action = Marker.DELETEALL  # This will delete all markers in this namespace
        delete_marker.id = 0
        self.marker_pub.publish(delete_marker)
        marker_id = 0
        
        # Find gaps in LIDAR data
        for i, distance in enumerate(self.lidar_ranges):
            if gap_start is None:
                gap_start = i
            else:
                if gap_start is not None:
                    
                    if (distance == self.max_gap_depth):
                        continue

                    # Calculate gap width in meters using arc length formula
                    start_angle = math.radians(180) + self.angle_min + (gap_start * self.angle_increment)
                    end_angle = math.radians(180) + self.angle_min + (i * self.angle_increment)
                    
                    # Get start and end points in Cartesian coordinates
                    start_x, start_y = polar_to_cartesian(self.lidar_ranges[gap_start], start_angle)
                    end_x, end_y = polar_to_cartesian(self.lidar_ranges[i], end_angle)
                    
                    # Calculate gap width using Euclidean distance
                    gap_width = math.sqrt((end_x - start_x)**2 + (end_y - start_y)**2)
                    
                    # Check if gap is wide enough (using meters)
                    if gap_width >= self.min_gap_width:
                        middle_x, middle_y = polar_to_cartesian( (self.lidar_ranges[i] + self.lidar_ranges[gap_start]) / 2, (start_angle + end_angle) / 2 )
                        self.visualization_manager.publish_marker_relative_to_robot(middle_x, middle_y, ns = "gap_markers", id = marker_id, color = (1, 0, 0), scale = 0.1) 
                        self.visualization_manager.publish_marker_relative_to_robot(start_x, start_y, ns = "gap_markers", id = marker_id + 1, color = (0, 1, 0), scale = 0.1) 
                        self.visualization_manager.publish_marker_relative_to_robot(end_x, end_y, ns = "gap_markers", id = marker_id + 2, color = (0, 1, 0), scale = 0.1) 

                        marker_id += 3

                        middle_x, middle_y = (end_x + start_x) / 2, (end_y + start_y) / 2
                        center_distance, center_angle = cartesian_to_polar(middle_x, middle_y, degrees=False)

                        #print position of gap
                        rospy.loginfo("Gap center position: (%.2f, %.2f)", middle_x, middle_y)
                        # Create gap object with center angle and average distance
                        gap = Gap((start_angle + end_angle) / 2, ( self.lidar_ranges[i] + self.lidar_ranges[gap_start] ) / 2)
                        gaps.append(gap)
                        

                    gap_start = i
        
        rospy.loginfo("Found %d gaps", len(gaps))
        return gaps

    def select_random_gap(self, gaps):
        """
        Select a random gap with preference for gaps in front of the robot
        """
        if not gaps:
            return None
            
        # Separate gaps into front and side gaps
        front_gaps = []
        side_gaps = []
        
        for gap in gaps:
            # Normalize gap angle relative to robot's current orientation
            relative_angle = gap.angle - self.current_position['theta']
            # Normalize to [-pi, pi]
            while relative_angle > math.pi:
                relative_angle -= 2 * math.pi
            while relative_angle < -math.pi:
                relative_angle += 2 * math.pi
                
            # Consider gaps within 90 degrees as "front" gaps
            if abs(relative_angle) <= math.pi/2:  # pi/2 = 90 degrees
                front_gaps.append(gap)
            else:
                side_gaps.append(gap)
        
        # 90% chance to select from front gaps if they exist
        if front_gaps and random.random() < 0.9:
            selected_gap = random.choice(front_gaps)
            rospy.loginfo("Selected front gap")
        else:
            # If no front gaps or 10% chance, select from all gaps
            selected_gap = random.choice(gaps)
            rospy.loginfo("Selected side gap")
        
        return selected_gap



    def main_logic(self):
        while not rospy.is_shutdown():
            try:

                #print current position and theta
                rospy.loginfo("Current position: (%.2f, %.2f) Orientation: %.2f degrees", 
                      self.current_position['x'], 
                      self.current_position['y'], 
                      math.degrees(self.current_position['theta'])) 

                # Find gaps
                gaps = self.find_gaps()
                # print every gap
                for gap in gaps:
                    rospy.loginfo("Gap: angle=%.1f deg (%.2f rad), distance=%.2f m", 
                                math.degrees(gap.angle), gap.angle, gap.distance)
                
                # Select random gap
                selected_gap = self.select_random_gap(gaps)
                
                if selected_gap:
                    pass
                    # Calculate target angle relative to robot's current orientation
                    #target_angle = selected_gap.angle
                    #rospy.loginfo("Rotating to gap at angle %.1f degrees", math.degrees(target_angle))
                    
                    # Rotate robot to face the gap
                    #self.change_angle(target_angle)
                
                self.rate.sleep()
                
            except Exception as e:
                rospy.logerr("Error in control loop: %s", str(e))
                self.stop_robot()

if __name__ == '__main__':
    try:
        teleop = AutoTeleop()
        teleop.main_logic()
    except rospy.ROSInterruptException:
        pass